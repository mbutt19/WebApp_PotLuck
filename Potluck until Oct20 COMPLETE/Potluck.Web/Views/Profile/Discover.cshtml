@model List<Potluck.Web.Models.UserDTO>

@{
    ViewData["Title"] = "Discover";
}

@section AddToHead{
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCPJpjD-qcR_yIxJnS8maR5W9KB0E3EzYI&callback=initMap&libraries=&v=weekly"
            defer></script>
    <style>
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            height: 100%;
        }
        select{
            color:white;
            text-align:center;           
        }
        option {
            padding-left: 1vw;
        }
        #miniProfile {
            max-height: 30vh;
            max-width: 30vh;
            min-height: 15vh;
            min-width: 15vh;
            overflow: hidden!important;
            padding: 0;
        }
        .push-s1{
            margin-top:5vh;
        }
        img {
            margin-top:2vh;
        }
        .gm-style-iw div {
            overflow: hidden !important;
        }
        .gm-style-iw {
            border: 4px solid #F42E56;
        }
    </style>
}

@{ 
    Role sellerRole = new Role(2, "ROLE_SELLER");
}

<div class="row Radical-Red white-text z-depth-2" style="width:90vw;margin:0 auto;margin-top:3vh;padding-bottom:2vh;">
    <div class="col s1 center" style="padding-top:2vh;">
        <label class="white-text"><b>Range:</b></label>
    </div>
    <div class="col s5">
        <select class="select-dropdown white-text" id="range" name="rangeSelect" onchange="refreshPage()">
            <option value="">Select Range</option>
            <option value="1">1 km</option>
            <option value="2">2 km</option>
            <option value="5">5 km</option>
            <option value="10">10 km</option>
            <option value="20">20 km</option>
        </select>
    </div>
    <div class="col s6">&nbsp;</div>
    <div class="col s11" style="height:80vh;width:90vw;margin:0 auto;">
        <div id="map"></div>
    </div>
</div>


<script>
    var zoomByRange = {
        "1" : "14.5",
        "2": "13.5",
        "5": "12.3",
        "10": "11.3",
        "20": "10.3"
    }

    function refreshPage() {
        var radiusLVL = document.getElementsByName('rangeSelect')[0].value;
        window.location.href = "/Profile/ShowDiscover/?maxRange=" + radiusLVL;
    }

    function initMap() {
        const infowindow = new google.maps.InfoWindow();
        // The curent location
        @foreach (AddressDTO address in Model.ElementAt(0).addresses)
        {
            @if (address.mainAddress)
            {
                <text>
                    var currentLocation = { lat: @address.latitude, lng: @address.longitude };
                </text>

            }
        }
        // The map, centered at current location
        var map = new google.maps.Map(
        document.getElementById('map'), { zoom: Number(zoomByRange["@ViewBag.MaxRange"]), center: currentLocation });
        //// The marker, positioned around current location
        //markers.push(new google.maps.Marker({ position: currentLocation, map: map }));
        @foreach (UserDTO user in Model)
        {
            @foreach (AddressDTO address in user.addresses)
            {
                @if (address.mainAddress)
                {
                    @if (user.roles.Any(r => r.authority == "ROLE_SELLER" || r.authority == "ROLE_ADMIN"))
                    {
                        string imageUrl;
                        string markerName = $"sellerMarker{user.userId}";
                        string markerListener = $"{markerName}.addListener('click', () =>";

                        if (user.imageUrl == null)
                        {
                            imageUrl = "/images/no-camera.png";
                        }
                        else
                        {
                            imageUrl = user.imageUrl;
                        }

                        string starString = "";
                        
                        double stars = 0;
                        if (user.reviews != 0)
                        {
                            stars = user.amountStars / user.reviews;
                        }

                        int fullStars = (int)Math.Floor(stars);
                        int emptyStars = 5 - fullStars;


                        for (int i = 0; i < fullStars; i++)
                        {
                            starString += "★";
                        }
                        for (int i = 0; i < emptyStars; i++)
                        {
                            starString += "☆";
                        }
                        
                        <text>
                            
                            var @markerName = new google.maps.Marker({
                                position: { lat: @address.latitude, lng: @address.longitude },
                                map: map,
                                draggable: false,
                                icon: {
                                    url: "http://maps.google.com/mapfiles/ms/icons/pink-dot.png"
                                }
                            });
                            @Html.Raw(markerListener)
                            {
                                infowindow.setContent('<a asp-controller="BuyerItem" asp-action="ShowMenu" asp-route-userId="@user.userId">'+
                                    "<div class='row' id='miniProfile'>" +
                                    "<div class='col s12' style='padding-top:1vh;'><h6 class='Radical-Red-text center-align'><b>@user.name</b></h6></div>" +
                                    "<div class='col s6 push-s3'><img src='@user.imageUrl' style='max-width:100%;' />" +
                                    "<div class='col s12 center'>@starString</div ></div ></a >"
                                );
                                infowindow.open(map, @markerName);
                            });
                        </text>
                    }
                    else
                    {
                        <text>
                            var currentUserMarker = new google.maps.Marker({
                                position: { lat: @address.latitude, lng: @address.longitude },
                                map: map,
                                draggable: false,
                                icon: {
                                    url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                                }
                            });
                        </text>
                    }
                }
            }
        }
        // The circle, positioned at current location
        var deliveryRange = new google.maps.Circle({
                                strokeColor: '#FF0000',
                                strokeOpacity: 0.8,
                                strokeWeight: 2,
                                fillColor: '#FF0000',
                                fillOpacity: 0.1,
                                map: map,
                                center: currentLocation,
                                radius: Number(@ViewBag.MaxRange + "000")
                                });
    }
</script>